diff --git a/bridge/third_party/quickjs/Makefile b/bridge/third_party/quickjs/Makefile
index 49b1f6fa7..1d4c5d42b 100644
--- a/bridge/third_party/quickjs/Makefile
+++ b/bridge/third_party/quickjs/Makefile
@@ -167,6 +167,7 @@ endif
 all: $(OBJDIR) $(OBJDIR)/quickjs.check.o $(OBJDIR)/qjs.check.o $(PROGS)
 
 QJS_LIB_OBJS=$(OBJDIR)/quickjs.o $(OBJDIR)/libregexp.o $(OBJDIR)/libunicode.o $(OBJDIR)/cutils.o $(OBJDIR)/quickjs-libc.o
+QJS_LIB_OBJS+=$(OBJDIR)/../rust/target/release/librust.a
 
 QJS_OBJS=$(OBJDIR)/qjs.o $(OBJDIR)/repl.o $(QJS_LIB_OBJS)
 ifdef CONFIG_BIGNUM
diff --git a/bridge/third_party/quickjs/quickjs-libc.c b/bridge/third_party/quickjs/quickjs-libc.c
index e180dd0cd..8a5bbbc97 100644
--- a/bridge/third_party/quickjs/quickjs-libc.c
+++ b/bridge/third_party/quickjs/quickjs-libc.c
@@ -70,6 +70,7 @@ typedef sig_t sighandler_t;
 #include "cutils.h"
 #include "list.h"
 #include "quickjs-libc.h"
+#include "rust/rust.h"
 
 /* TODO:
    - add socket calls
@@ -3893,6 +3894,7 @@ void js_std_loop(JSContext *ctx)
         }
 
         if (!os_poll_func || os_poll_func(ctx))
+if (rust_ended(ctx))
             break;
     }
 }
diff --git a/bridge/third_party/quickjs/quickjs.c b/bridge/third_party/quickjs/quickjs.c
index cb09d5f3e..3b3c97c94 100644
--- a/bridge/third_party/quickjs/quickjs.c
+++ b/bridge/third_party/quickjs/quickjs.c
@@ -43,6 +43,7 @@
 #include "cutils.h"
 #include "list.h"
 #include "quickjs.h"
+#include "quickjs_rust/quickjs_rust.h"
 #include "libregexp.h"
 #ifdef CONFIG_BIGNUM
 #include "libbf.h"
@@ -1838,6 +1839,9 @@ int JS_ExecutePendingJob(JSRuntime *rt, JSContext **pctx)
 
     if (list_empty(&rt->job_list)) {
         *pctx = NULL;
+if(rust_run(rt))
+{return 1;}
+else
         return 0;
     }
 
@@ -1926,6 +1930,7 @@ void JS_SetRuntimeInfo(JSRuntime *rt, const char *s)
 
 void JS_FreeRuntime(JSRuntime *rt)
 {
+rust_rt_exit(rt);
     struct list_head *el, *el1;
     int i;
 
@@ -2156,6 +2161,7 @@ JSContext *JS_NewContext(JSRuntime *rt)
         return NULL;
 
     JS_AddIntrinsicBaseObjects(ctx);
+JS_AddRust(ctx,rt);
     JS_AddIntrinsicDate(ctx);
     JS_AddIntrinsicEval(ctx);
     JS_AddIntrinsicStringNormalize(ctx);
@@ -2278,6 +2284,7 @@ void JS_FreeContext(JSContext *ctx)
     if (--ctx->header.ref_count > 0)
         return;
     assert(ctx->header.ref_count == 0);
+rust_ctx_exit(ctx,ctx->rt);
 
 #ifdef DUMP_ATOMS
     JS_DumpAtoms(ctx->rt);
